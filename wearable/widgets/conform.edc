/*
 * Copyright (c) 2010 Samsung Electronics Co., Ltd All Rights Reserved
 *
 * BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this
 *      list of conditions and the following disclaimer.
 *   2. Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#define LAYOUT_INDICATOR_HEIGHT_INC 0

// FIXME: conformant UX is not defined for wearable yet
// indicator area size is 0. indicator color is transparent.
group { name: "elm/conformant/base/default";
   script {
      public indicator_effect = 0;     //Indicator need effect
      public indicator_visible = 0;     //Indicator visible check
      public indicator_opacity = 0;     //0=opaque, 1=transparent
      public indicator_overlap = 0;     //check indicator overlap/nooverlap
      public clipboard_disable  = 0;     //check clipboard enable/disable
      public keypad_disable = 0;  //check virtualkeypad enable/disable
      public landscape = 0; //Landscape mode status
      public portrait_overlap = 0; //save portrait_overlap mode
      public portrait_opacity = 0; //save portrait_opacity
   }
   parts {
      part { name: "elm.swallow.bg";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
         }
      }
      part { name: "indicator_base";
         type: RECT;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
            fixed: 0 1;
            align: 0.5 0.0;
            min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
            rel2.relative: 1.0 0.0;
            visible: 0;
         }
         description { state: "hide" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
         }
      }
      part { name: "indicator_overlap_base";
         type: RECT;
         description { state: "default" 0.0; //nooverlap
            rel1 { relative: 0.0 0.0; to: "indicator_base"; }
            rel2 { relative: 1.0 1.0; to: "indicator_base"; }
            visible: 0;
         }
         description { state: "overlap" 0.0; //content start (0,0)
            inherit: "default" 0.0;
            rel2 { relative: 1.0 0.0; to: "indicator_base"; }
         }
      }
      part { name: "elm.swallow.content";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0; //sip: enable
            align: 0.5 0.5;
            rel1.relative: 0.0 1.0;
            rel1.to: "indicator_overlap_base";
            rel2.relative: 1.0 0.0;
            rel2.to: "sip_area";
         }
         description { state: "disable_sip" 0.0; //sip: disable
            inherit: "default" 0.0;
            rel2.relative: 1.0 1.0;
            rel2.to: "elm.swallow.bg";
         }
      }
      part { name: "elm.swallow.ug";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            align: 0.5 0.5;
            rel1.relative: 0.0 1.0;
            rel1.to: "indicator_overlap_base";
            rel2.relative: 1.0 0.0;
            rel2.to: "sip_area";
         }
         description { state: "disable_sip" 0.0; //sip: disable
            inherit: "default" 0.0;
            rel2.relative: 1.0 1.0;
            rel2.to: "elm.swallow.bg";
         }
      }
     part { name: "elm.swallow.dim";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "elm.swallow.content";
            rel2.to: "elm.swallow.content";
         }
      }
      part { name: "indicator_event";
         type: RECT;
         repeat_events: 1;
         description { state: "default" 0.0;
            rel1 { relative: 0.0 0.0; to: "elm.swallow.content"; }
            rel2 { relative: 1.0 1.0; to: "elm.swallow.content"; }
            color: 0 0 0 0;
            visible: 1;
         }
      }
      part { name: "indicator_clipper";
         type: RECT;
         description { state: "default" 0.0;
            rel1 { relative: 0.0 0.0; to: "indicator_base"; }
            rel2 { relative: 1.0 1.0; to: "indicator_base"; }
            visible: 1;
         }
         description { state: "hide" 0.0;
            inherit: "default" 0.0;
            rel1 { relative: 0.0 -1.0; to: "indicator_base"; }
            rel2 { relative: 1.0  0.0; to: "indicator_base"; }
         }
      }
      part { name: "indicator_bg";
         type: RECT;
         clip_to: "indicator_clipper";
         description { state: "default" 0.0;
            rel1 { relative: 0.0 0.0; to: "indicator_clipper"; }
            rel2 { relative: 1.0 1.0; to: "indicator_clipper"; }
            color: 0 0 0 0; // FIXME
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.swallow.indicator_bg";
         type: SWALLOW;
         clip_to: "indicator_clipper";
         description { state: "default" 0.0;
            rel1 { relative: 0.0 0.0; to: "indicator_clipper"; }
            rel2 { relative: 1.0 1.0; to: "indicator_clipper"; }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.swallow.indicator";
         type: SWALLOW;
         scale: 1;
         clip_to: "indicator_clipper";
         description { state: "default" 0.0;
            rel1 { relative: 0.0 0.0; to: "indicator_clipper"; }
            rel2 { relative: 1.0 1.0; to: "indicator_clipper"; }
         }
      }
      part { name: "sip_area";
         type: RECT;
         description { state: "default" 0.0;
            fixed: 0 1;
            min: 0 0;
            rel1.relative: 0.0 0.0;
            rel1.to_y: "elm.swallow.virtualkeypad";
            rel2.relative: 1.0 1.0;
            rel2.to_y: "elm.swallow.virtualkeypad";
            visible: 0;
         }
         description { state: "clipboard_on" 0.0;
            inherit: "default" 0.0;
            rel1.to_y: "elm.swallow.clipboard";
            rel2.to_y: "elm.swallow.clipboard";
         }
      }
      part { name: "clipboard_bg";
          type: RECT;
          description { state: "default" 0.0;
            rel1.to: "elm.swallow.clipboard";
            rel2.to: "elm.swallow.clipboard";
            color: 0 19 35 255; /*(Changeable UI) color_class: "B011";*/
          }
      }
      part { name: "elm.swallow.clipboard";
         type: SWALLOW;
         description { state: "default" 0.0;
            fixed: 0 1;
            align: 0.0 1.0;
            rel1.relative: 0.0 1.0;
         }
      }
      part { name: "virtualkeypad_bg";
         type: RECT;
         description { state: "default" 0.0;
            rel1.to: "elm.swallow.virtualkeypad";
            rel2.to: "elm.swallow.virtualkeypad";
            color: 0 19 35 255; /*(Changeable UI) color_class: "B011";*/
          }
      }
      part { name: "elm.swallow.virtualkeypad";
         type: SWALLOW;
         description { state: "default" 0.0;
            fixed: 0 1;
            align: 0.0 1.0;
            rel1.relative: 0.0 1.0;
         }
      }
   }
   programs {
      program {
          name: "show_indicator"; //show indicator using effect
          signal: "elm,state,indicator,show";
          source: "elm";
          script {
             set_int(indicator_visible, 1);
             set_state(PART:"indicator_base", "default", 0.0);
             //it is possible app call show after opacity call
             /////Portrait
             if (get_int(landscape) == 0) {
               if (get_int(indicator_opacity) == 0)
                 run_program(PROGRAM:"opaque_state");
               if (get_int(indicator_opacity) == 1)
                 run_program(PROGRAM:"transparent_state");
             }
             /////Landscape
             else
               run_program(PROGRAM:"transparent_state");
          }
      }
      program {
          name: "hide_indicator";
          signal: "elm,state,indicator,hide";
          source: "elm";
          script {
             set_int(indicator_visible, 0);
             set_state(PART:"indicator_base", "hide", 0.0);
          }
      }
      program {
          name: "show_indicator_transition"; //show indicator using effect
          action: STATE_SET "default" 0.0;
          target: "indicator_clipper";
          transition: DECELERATE 0.2;
      }
      program {
          name: "hide_indicator_transition"; //show indicator using effect
          action: STATE_SET "hide" 0.0;
          target: "indicator_clipper";
          transition: DECELERATE 0.2;
      }
      program {
          name: "show_indicator_effect"; //show indicator using effect
          signal: "indicator,show,effect";
          source: "elm";
          script {
             if (get_int(indicator_visible) == 1)
               run_program(PROGRAM:"show_indicator_transition");
          }
      }
      program {
          name: "hide_indicator_effect"; //show indicator using effect
          signal: "indicator,hide,effect";
          source: "elm";
          script {
             if (get_int(indicator_visible) == 1)
               run_program(PROGRAM:"hide_indicator_transition");
          }
      }
      program {
          name: "opaque_state";
          script {
             set_state(PART:"elm.swallow.indicator_bg", "default", 0.0);
             set_state(PART:"indicator_clipper", "default", 0.0);
             if (get_int(indicator_overlap) == 0)
               {
                 set_state(PART:"indicator_overlap_base", "default", 0.0);
                 set_state(PART:"indicator_bg", "default", 0.0);
               }
             else
               {
                 set_state(PART:"indicator_overlap_base", "overlap", 0.0);
                 set_state(PART:"indicator_bg", "hidden", 0.0);
               }
          }
      }
      program {
          name: "transparent_state";
          script {
             set_state(PART:"indicator_bg", "default", 0.0);
             set_state(PART:"elm.swallow.indicator_bg", "hidden", 0.0);
             set_state(PART:"indicator_clipper", "hide", 0.0);
             set_state(PART:"indicator_overlap_base", "overlap", 0.0);
          }
      }

      program {
          name: "opaque_indicator";
          signal: "elm,state,indicator,opaque";
          source: "elm";
          script {
            set_int(indicator_opacity, 0);
            if ((get_int(indicator_visible) == 1) && (get_int(landscape) == 0))
              run_program(PROGRAM:"opaque_state");
          }
      }
      program {
          name: "transparent_indicator";
          signal: "elm,state,indicator,transparent";
          source: "elm";
          script {
             set_int(indicator_opacity, 1);
             if (get_int(indicator_visible) == 1)
               run_program(PROGRAM:"transparent_state");
          }
      }
      program {
         name: "overlap_indicator";
         signal: "elm,state,indicator,overlap";
         source: "elm";
         script {
            set_int(indicator_overlap, 1);
            set_state(PART:"indicator_overlap_base", "overlap", 0.0);
            set_state(PART:"indicator_bg", "hidden", 0.0);
        }
      }
      program {
         name: "nooverlap_indicator";
         signal: "elm,state,indicator,nooverlap";
         source: "elm";
         script {
            //Only portrait state get nooverlap mode
            set_int(indicator_overlap, 0);
            if (get_int(indicator_visible) == 1)
              if (get_int(indicator_opacity) == 0) { //only opaque can be nooverlap
                if (get_int(landscape) == 0) { //landscape should be overlap
                  set_state(PART:"indicator_overlap_base", "default", 0.0);
                  set_state(PART:"indicator_bg", "default", 0.0);
                }
              }
         }
      }
      program { name: "enable_clipboard";
         signal: "elm,state,clipboard,enable";
         source: "";
         script {
            set_int(clipboard_disable, 0);
            //set content state
            set_state(PART:"elm.swallow.content", "default", 0.0);
         }
      }
      program { name: "disable_clipboard";
         signal: "elm,state,clipboard,disable";
         source: "";
         script {
            set_int(clipboard_disable, 1);
            set_state(PART:"sip_area", "default", 0.0);
            if (get_int(keypad_disable) == 1)
              set_state(PART:"elm.swallow.content", "disable_sip", 0.0);
            else
              set_state(PART:"elm.swallow.content", "default", 0.0);
         }
      }
      program { name: "enable_virtualkeypad";
         signal: "elm,state,virtualkeypad,enable";
         source: "";
         script {
            set_int(keypad_disable, 0);
            set_state(PART:"elm.swallow.content", "default", 0.0);
         }
      }
      program { name: "disable_virtualkeypad";
         signal: "elm,state,virtualkeypad,disable";
         source: "";
         script {
            set_int(keypad_disable, 1);
            if (get_int(clipboard_disable) == 1)
              {
                 set_state(PART:"sip_area", "clipboard_on", 0.0);
                 set_state(PART:"elm.swallow.content", "disable_sip", 0.0);
              }
            else
              set_state(PART:"elm.swallow.content", "default", 0.0);
         }
      }
      program {
          name: "change_to_landscape";
          script {
             if (get_int(landscape) == 0) {
               set_int(landscape, 1);
               if (get_int(indicator_visible) == 1)
                 run_program(PROGRAM:"transparent_state");
             }
          }
       }
       program {
          name: "change_to_portrait";
          script {
             if (get_int(landscape) == 1) {  //content start (0, indicator height)
                set_int(landscape, 0);
                if (get_int(indicator_visible) == 1) {
                  if (get_int(indicator_opacity) == 1)
                    run_program(PROGRAM:"transparent_state");
                  else
                    run_program(PROGRAM:"opaque_state");
                }
             }
          }
       }
       program { name: "landscape_mode";
          source: "elm";
          signal: "elm,state,orient,90";
          after: "change_to_landscape";
       }
       program { name: "landscape_mode2";
          source: "elm";
          signal: "elm,state,orient,270";
          after: "change_to_landscape";
       }
       program { name: "portrait_mode";
          source: "elm";
          signal: "elm,state,orient,0";
          after: "change_to_portrait";
       }
       program { name: "portrait_mode2";
          source: "elm";
          signal: "elm,state,orient,180";
          after: "change_to_portrait";
      }
      program {
          name: "clipboard_on";
          signal: "elm,state,clipboard,on";
          source: "elm";
          action: STATE_SET "clipboard_on" 0.0;
          target: "sip_area";
      }
      program {
          name: "clipboard_off";
          signal: "elm,state,clipboard,off";
          source: "elm";
          action: STATE_SET "default" 0.0;
          target: "sip_area";
      }
      program { name: "indicator_event_down";
          signal: "mouse,down,1";
          source: "indicator_event";
          action: SIGNAL_EMIT "elm,action,press" "";
      }
   }
}

group { name: "elm/conformant/base/without_resize";
   script {
      public indicator_visible = 0;     //Indicator visible check
      public indicator_opacity = 0;     //0=opaque, 1=transparent
   }
   parts {
      part { name: "elm.swallow.bg";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
         }
      }
      part { name: "elm.swallow.indicator_area";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 0 1;
            align: 0.5 0.0;
            min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
            rel2.relative: 1.0 0.0;
            visible: 1;
         }
      }
      part { name: "elm.swallow.content";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            align: 0.5 0.5;
            rel1.relative: 0.0 1.0;
            rel1.to: "elm.swallow.indicator_area";
         }
      }
      part { name: "indicator_bg";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 0 1;
            align: 0.5 0.0;
            min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
            rel2.relative: 1.0 0.0;
            visible: 1;
            color: 0 0 0 0; // FIXME
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
            min: 0 0;
         }
      }
      part { name: "elm.swallow.indicator_bg";
         type: SWALLOW;
         description { state: "default" 0.0;
            fixed: 0 1;
            align: 0.5 0.0;
            min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
            rel2.relative: 1.0 0.0;
            visible: 1;
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.swallow.indicator";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 0 1;
            align: 0.5 0.0;
            min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
            rel2.relative: 1.0 0.0;
            visible: 1;
         }
          description { state: "hide" 0.0;
            inherit: "default" 0.0;
            visible: 0;
            min: 0 0;
         }
      }
   }
   programs {
      program {
          name: "show_indicator";
          signal: "elm,state,indicator,show";
          source: "elm";
          script {
             set_int(indicator_visible, 1);
             set_state(PART:"elm.swallow.indicator", "default", 0.0);
             if (get_int(indicator_opacity) == 0)
               {
                 set_state(PART:"indicator_bg", "default", 0.0);
                 set_state(PART:"elm.swallow.indicator_bg", "default", 0.0);
               }
          }
      }
      program {
          name: "hide_indicator";
          signal: "elm,state,indicator,hide";
          source: "elm";
          script {
             set_int(indicator_visible, 0);
             set_state(PART:"elm.swallow.indicator", "hide", 0.0);
             set_state(PART:"indicator_bg", "hidden", 0.0);
             set_state(PART:"elm.swallow.indicator_bg", "hidden", 0.0);
          }
      }
      program {
          name: "opaque_indicator";
          signal: "elm,state,indicator,opaque";
          source: "elm";
          script {
             set_int(indicator_opacity, 0);
             if (get_int(indicator_visible) == 1)
               {
                 set_state(PART:"indicator_bg", "default", 0.0);
                 set_state(PART:"elm.swallow.indicator_bg", "default", 0.0);
               }
          }
      }
   }
}

///////////////////////////////////////////////////////////////
// For supporting efl-ext APIs. ///////////////////////////////
///////////////////////////////////////////////////////////////
group { name: "elm/conformant/base/circle";
   inherit: "elm/conformant/base/default";
   parts {
      part { name: "elm.swallow.circle";
         type: SWALLOW;
         description { state: "default";
            visible: 1;
         }
      }
   }
}
///////////////////////////////////////////////////////////////
