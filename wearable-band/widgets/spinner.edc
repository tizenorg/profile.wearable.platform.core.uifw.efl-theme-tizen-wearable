/*
 * Copyright (c) 2015 Samsung Electronics Co., Ltd All Rights Reserved
 *
 * BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this
 *      list of conditions and the following disclaimer.
 *   2. Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

///////////////////////////////////////////////////////////////////////////////

group { name: "elm/spinner/base/default";
   alias: "elm/spinner/base/horizontal";
   alias: "elm/spinner/base/date_picker";
   alias: "elm/spinner/base/time_picker";
   parts {
      part { name: "base";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: SPINNER_HORIZONTAL_BG_MIN_SIZE_INC;
            max: SPINNER_HORIZONTAL_BG_MAX_SIZE_INC;
         }
      }
      part { name: "access";
         type: RECT;
         repeat_events: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            color: 0 0 0 0;
            rel1.to: "base";
            rel2.to: "base";
            visible: 1;
         }
         description { state: "active" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.swallow.dec_button";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            min: SPINNER_HORIZONTAL_ARROW_SIZE_INC;
            max: SPINNER_HORIZONTAL_ARROW_SIZE_INC;
            fixed: 1 1;
            rel1.to: "base";
            rel2 {
               relative: 1.0 0.0;
               to: "base";
            }
            align: 0.0 0.0;
         }
      }
      part { name: "elm.swallow.inc_button";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            min: SPINNER_HORIZONTAL_ARROW_SIZE_INC;
            max: SPINNER_HORIZONTAL_ARROW_SIZE_INC;
            fixed: 1 1;
            rel1.to: "base";
            rel2 {
               relative: 1.0 0.0;
               to: "base";
            }
            align: 1.0 0.0;
         }
      }
      part { name: "elm.swallow.text_button";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            min: 0 SPINNER_HORIZONTAL_TEXT_HEIGHT_INC;
            max: -1 SPINNER_HORIZONTAL_TEXT_HEIGHT_INC;
            fixed: 0 1;
            rel1.to: "base";
            rel2 {
               relative: 1.0 0.0;
               to: "base";
            }
            align: 0.5 0.0;
         }
      }
      part { name: "elm.swallow.entry";
         type: SWALLOW;
         description { state: "default" 0.0;
            visible: 0;
            rel1.to: "elm.swallow.text_button";
            rel2.to: "elm.swallow.text_button";
            min: 0 SPINNER_HORIZONTAL_TEXT_HEIGHT_INC;
            max: -1 SPINNER_HORIZONTAL_TEXT_HEIGHT_INC;
            fixed: 0 1;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         scale: 1;
         description { state: "default" 0.0;
            text.style: "spinner_unit_normal";
            min: 0 SPINNER_HORIZONTAL_TITLE_TEXT_HEIGHT_INC;
            max: -1 SPINNER_HORIZONTAL_TITLE_TEXT_HEIGHT_INC;
            rel1 {
               relative: 0.0 1.0;
               to: "base";
            }
            rel2.to: "base";
            align: 0.5 1.0;
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            text.style: "spinner_unit_press";
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text.style: "spinner_unit_dim";
         }
      }
      part { name: "disabler";
         type: RECT;
         description { state: "default" 0.0;
            color: 0 0 0 0;
            visible: 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
   }
   programs {
      program { name: "access_activate";
         signal: "elm,state,access,active";
         source: "elm";
         action:  STATE_SET "default" 0.0;
         target: "access";
      }
      program { name: "access_inactivate";
         signal: "elm,state,access,inactive";
         source: "elm";
         action:  STATE_SET "active" 0.0;
         target: "access";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "disabler";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "disabler";
      }
   }
}

group { name: "elm/spinner/base/vertical";
   parts {
      part { name: "base";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: SPINNER_VERTICAL_BG_MIN_SIZE_INC;
         }
      }
      part { name: "access";
         type: RECT;
         repeat_events: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            color: 0 0 0 0;
            rel1.to: "base";
            rel2.to: "base";
            visible: 1;
         }
         description { state: "active" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.swallow.inc_button";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            min: SPINNER_VERTICAL_ARROW_SIZE_INC;
            max: SPINNER_VERTICAL_ARROW_SIZE_INC;
            rel1.to: "base";
            rel2 {
               relative: 1.0 0.0;
               to: "base";
            }
            align: 0.5 0.0;
         }
      }
      part { name: "elm.swallow.dec_button";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            min: SPINNER_VERTICAL_ARROW_SIZE_INC;
            max: SPINNER_VERTICAL_ARROW_SIZE_INC;
            rel1 {
               relative: 0.0 1.0;
               to: "base";
            }
            rel2.to: "base";
            align: 0.5 1.0;
         }
      }
      part { name: "center_padding1";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: 0 SPINNER_VERTICAL_UNIT_CENTER_TOP_PADDING_HEIGHT_INC;
            fixed: 0 1;
            rel1 {
               relative: 0.0 1.0;
               to: "elm.swallow.inc_button";
            }
            rel2.to: "elm.swallow.inc_button";
            align: 0.5 0.0;
         }
         description { state: "icon_visible" 0.0;
            inherit: "default" 0.0;
            min: 0 SPINNER_VERTICAL_ICON_CENTER_TOP_BOTTOM_PADDING_HEIGHT_INC;
         }
      }
      part { name: "center_padding2";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: 0 SPINNER_VERTICAL_UNIT_CENTER_BOTTOM_PADDING_HEIGHT_INC;
            fixed: 0 1;
            rel1.to: "elm.swallow.dec_button";
            rel2 {
               relative: 1.0 0.0;
               to: "elm.swallow.dec_button";
            }
            align: 0.5 1.0;
         }
         description { state: "icon_visible" 0.0;
            inherit: "default" 0.0;
            min: 0 SPINNER_VERTICAL_ICON_CENTER_TOP_BOTTOM_PADDING_HEIGHT_INC;
         }
      }
      part { name: "content_bg";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: 0 SPINNER_VERTICAL_UNIT_CONTENT_HEIGHT_INC;
            max: -1 SPINNER_VERTICAL_UNIT_CONTENT_HEIGHT_INC;
            fixed: 0 1;
            rel1 {
               relative: 0.0 1.0;
               to: "center_padding1";
            }
            rel2 {
               relative: 1.0 0.0;
               to: "center_padding2";
            }
         }
         description { state: "icon_visible" 0.0;
            inherit: "default" 0.0;
            min: 0 SPINNER_VERTICAL_ICON_CONTENT_HEIGHT_INC;
            max: -1 SPINNER_VERTICAL_ICON_CONTENT_HEIGHT_INC;
         }
      }
      part { name: "icon_text_padding";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: SPINNER_VERTICAL_ICON_TEXT_PADDING_WIDTH_INC 0;
            max: SPINNER_VERTICAL_ICON_TEXT_PADDING_WIDTH_INC -1;
            fixed: 1 0;
            rel1 {
               relative: 0.5 0.0;
               to: "content_bg";
            }
            rel2 {
               relative: 0.5 1.0;
               to: "content_bg";
            }
            align: 1.0 0.5;
         }
      }
      part { name: "elm.swallow.text_button";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            min: 0 SPINNER_VERTICAL_TEXT_HEIGHT_INC;
            max: -1 SPINNER_VERTICAL_TEXT_HEIGHT_INC;
            fixed: 0 1;
            rel1 {
               relative: 0.0 1.0;
               to: "elm.swallow.inc_button";
            }
            rel2 {
               relative: 1.0 0.0;
               to: "elm.swallow.dec_button";
            }
            align: 0.5 0.5;
         }
         description { state: "unit_visible" 0.0;
            inherit: "default" 0.0;
            rel1 {
               relative: 0.0 0.0;
               to: "content_bg";
            }
            rel2 {
               relative: 1.0 0.0;
               to: "content_bg";
            }
            align: 0.5 0.0;
         }
         description { state: "icon_visible" 0.0;
            inherit: "default" 0.0;
            rel1 {
               relative: 1.0 0.0;
               to: "icon_text_padding";
            }
            rel2 {
               relative: 1.0 1.0;
               to: "icon_text_padding";
            }
            align: 0.0 0.5;
         }
      }
      part { name: "elm.swallow.entry";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            visible: 0;
            rel1.to: "elm.swallow.text_button";
            rel2.to: "elm.swallow.text_button";
            min: 0 SPINNER_VERTICAL_TEXT_HEIGHT_INC;
            max: -1 SPINNER_VERTICAL_TEXT_HEIGHT_INC;
            fixed: 0 1;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         scale: 1;
         description { state: "default" 0.0;
            visible: 0;
            text.style: "spinner_unit_normal";
            min: 0 SPINNER_VERTICAL_UNIT_TITLE_TEXT_HEIGHT_INC;
            max: -1 SPINNER_VERTICAL_UNIT_TITLE_TEXT_HEIGHT_INC;
            fixed: 0 1;
            rel1 {
               relative: 0.0 1.0;
               to: "content_bg";
            }
            rel2.to: "content_bg";
            align: 0.5 1.0;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            text.style: "spinner_unit_press";
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text.style: "spinner_unit_dim";
         }
      }
      part { name: "elm.swallow.icon";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            visible: 0;
            min: SPINNER_VERTICAL_ICON_SIZE_INC;
            max: SPINNER_VERTICAL_ICON_SIZE_INC;
            fixed: 1 1;
            rel1 {
               relative: 0.0 0.0;
               to: "icon_text_padding";
            }
            rel2 {
               relative: 0.0 1.0;
               to: "icon_text_padding";
            }
            align: 1.0 0.5;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "disabler";
         type: RECT;
         description { state: "default" 0.0;
            color: 0 0 0 0;
            visible: 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
   }
   programs {
      program { name: "access_activate";
         signal: "elm,state,access,active";
         source: "elm";
         action:  STATE_SET "default" 0.0;
         target: "access";
      }
      program { name: "access_inactivate";
         signal: "elm,state,access,inactive";
         source: "elm";
         action:  STATE_SET "active" 0.0;
         target: "access";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "disabler";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "disabler";
      }
      program { name: "text_show";
        signal: "elm,state,text,visible";
        source: "elm";
        script {
             set_state(PART:"elm.text", "visible", 0.0);
             set_state(PART:"elm.swallow.text_button", "unit_visible", 0.0);
        }
      }
      program { name: "text_hide";
        signal: "elm,state,text,hidden";
        source: "elm";
        script {
             set_state(PART:"elm.text", "default", 0.0);
             set_state(PART:"elm.swallow.text_button", "default", 0.0);
        }
      }
      program { name: "icon_show";
        signal: "elm,state,icon,visible";
        source: "elm";
        script {
             set_state(PART:"elm.swallow.icon", "visible", 0.0);
             set_state(PART:"elm.swallow.text_button", "icon_visible", 0.0);
        }
      }
      program { name: "icon_hide";
        signal: "elm,state,icon,hidden";
        source: "elm";
        script {
             set_state(PART:"elm.swallow.icon", "default", 0.0);
             set_state(PART:"elm.swallow.text_button", "default", 0.0);
        }
      }
   }
}
